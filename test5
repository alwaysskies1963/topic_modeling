def chunk_dict(data, chunk_size):
    """
    Divides a dictionary into smaller dictionaries of a given chunk size.

    Parameters:
    data (dict): The original dictionary to divide.
    chunk_size (int): The maximum number of items each chunk should contain.

    Returns:
    list: A list of dictionaries, each containing up to `chunk_size` items.
    """
    it = iter(data.items())
    return [dict(list(data_chunk)) for data_chunk in iter(lambda: list(itertools.islice(it, chunk_size)), [])]











import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Example DataFrame
data = {
    'property_part': ['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C'],
    'year_built': [1900, 1980, 1995, 1920, 1960, 2000, 1885, 1990, 2020],
    'inspector_rating': [5, 4, 3, 2, 1, 5, 4, 3, 2],
    'model_rating': [4, 4, 5, 2, 1, 3, 5, 2, 3]
}
df = pd.DataFrame(data)

# Step 1: Create bins for year_built
bins = [1885, 1950, 1990, 2023]
labels = ['1885-1950', '1951-1990', '1991-2023']
df['year_built_bin'] = pd.cut(df['year_built'], bins=bins, labels=labels)

# Step 2: Calculate the inconsistency (absolute difference between ratings)
df['rating_difference'] = abs(df['inspector_rating'] - df['model_rating'])

# Step 3: Create a binary column indicating if ratings are inconsistent (difference > 0)
df['inconsistent'] = df['rating_difference'] > 0

# Step 4: Group by year_built_bin and calculate the percentage of inconsistencies
inconsistency_rate = df.groupby('year_built_bin')['inconsistent'].mean() * 100

# Step 5: Plot the inconsistency rates
plt.figure(figsize=(8, 6))
sns.barplot(x=inconsistency_rate.index, y=inconsistency_rate.values, palette="viridis")
plt.title('Inconsistency Rates between Inspector and Model Ratings by Year Built Bins')
plt.xlabel('Year Built Bins')
plt.ylabel('Inconsistency Rate (%)')
plt.ylim(0, 100)
plt.show()





import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Example DataFrame
data = {
    'property_part': ['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C'],
    'year_built': [1900, 1980, 1995, 1920, 1960, 2000, 1885, 1990, 2020],
    'inspector_rating': [5, 4, 3, 2, 1, 5, 4, 3, 2],
    'model_rating': [4, 4, 5, 2, 1, 3, 5, 2, 3]
}
df = pd.DataFrame(data)

# Step 1: Create bins for year_built
bins = [1885, 1950, 1990, 2023]
labels = ['1885-1950', '1951-1990', '1991-2023']
df['year_built_bin'] = pd.cut(df['year_built'], bins=bins, labels=labels)

# Step 2: Calculate the inconsistency (absolute difference between ratings)
df['rating_difference'] = abs(df['inspector_rating'] - df['model_rating'])

# Step 3: Create a binary column indicating if ratings are inconsistent (difference > 0)
df['inconsistent'] = df['rating_difference'] > 0

# Step 4: Create the secondary variable for property risk (True if model_rating > inspector_rating)
df['property_risk_higher'] = df['model_rating'] > df['inspector_rating']

# Step 5: Group by year_built_bin and calculate the percentage of inconsistencies
inconsistency_rate = df.groupby('year_built_bin')['inconsistent'].mean() * 100

# Step 6: Group by year_built_bin and calculate the percentage of properties with higher risk based on model_rating
risk_higher_rate = df.groupby('year_built_bin')['property_risk_higher'].mean() * 100

# Step 7: Plot the inconsistency rates
plt.figure(figsize=(12, 6))

# Plot inconsistency rates
plt.subplot(1, 2, 1)
sns.barplot(x=inconsistency_rate.index, y=inconsistency_rate.values, palette="viridis")
plt.title('Inconsistency Rates by Year Built Bins')
plt.xlabel('Year Built Bins')
plt.ylabel('Inconsistency Rate (%)')
plt.ylim(0, 100)

# Plot property risk higher rates
plt.subplot(1, 2, 2)
sns.barplot(x=risk_higher_rate.index, y=risk_higher_rate.values, palette="coolwarm")
plt.title('Higher Property Risk (Model Rating > Inspector Rating) by Year Built Bins')
plt.xlabel('Year Built Bins')
plt.ylabel('Higher Property Risk Rate (%)')
plt.ylim(0, 100)
# Add labels inside the bars
for i, value in enumerate(risk_higher_rate.values):
    barplot2.text(i, value - 5, f'{value:.1f}%', color='white', ha='center')
plt.tight_layout()
plt.show()
























def convert_none_to_empty(d):
    if isinstance(d, dict):
        return {k: convert_none_to_empty(v) for k, v in d.items()}
    elif d is None:
        return ''
    else:
        return d 

-------------


import matplotlib.pyplot as plt
from PIL import Image
import math

def display_images_from_paths(image_paths, max_figsize=(15, 15), min_size_per_image=(2, 2), dpi=300):
    """
    Reads and displays images from a list of file paths in an optimized grid layout.
    Saves the output as a high-resolution image with adaptive sizing.

    Parameters:
    - image_paths (list): A list of image file paths.
    - max_figsize (tuple): Maximum size of the figure (width, height) in inches.
    - min_size_per_image (tuple): Minimum size for each image (width, height) in inches.
    - dpi (int): DPI for high-resolution output.

    Returns:
    - None
    """
    # Load the images
    images = [Image.open(path) for path in image_paths]
    sizes = [img.size for img in images]  # (width, height) for each image

    # Determine the maximum width and height among all images
    max_width = max(width for width, height in sizes)
    max_height = max(height for width, height in sizes)

    # Determine the number of images
    num_images = len(images)

    # Calculate the optimal number of rows and columns
    cols = math.ceil(math.sqrt(num_images))
    rows = math.ceil(num_images / cols)

    # Calculate initial figsize based on image sizes
    fig_width = max(min_size_per_image[0] * cols, min(max_width * cols / dpi, max_figsize[0]))
    fig_height = max(min_size_per_image[1] * rows, min(max_height * rows / dpi, max_figsize[1]))

    # Create a figure with subplots
    fig, axes = plt.subplots(rows, cols, figsize=(fig_width, fig_height), dpi=dpi)
    axes = axes.flatten()  # Flatten the axes array for easy iteration

    # Loop over the images and plot each one
    for i, img in enumerate(images):
        axes[i].imshow(img)
        axes[i].axis('off')  # Hide the axes

    # Hide any remaining empty subplots
    for j in range(i + 1, len(axes)):
        axes[j].axis('off')

    # Save the figure as a high-resolution image
    plt.tight_layout()
    plt.savefig('output_image.png', dpi=dpi)  # Save with high resolution
    plt.show()

# Example usage
image_paths = ['path/to/image1.png', 'path/to/image2.jpg', 'path/to/image3.jpeg']  # Replace with your actual paths
display_images_from_paths(image_paths)



-------------------------------------------------------------
import matplotlib.pyplot as plt
from PIL import Image
import math

def display_images_from_paths(image_paths):
    """
    Reads and displays images from a list of file paths in an optimized grid layout.

    Parameters:
    - image_paths (list): A list of image file paths.

    Returns:
    - None
    """
    # Load the images and determine their sizes
    images = [Image.open(path) for path in image_paths]
    sizes = [img.size for img in images]  # (width, height) for each image

    # Determine the maximum width and height among all images
    max_width = max(width for width, height in sizes)
    max_height = max(height for width, height in sizes)

    # Determine the number of images
    num_images = len(images)

    # Calculate the optimal number of rows and columns
    cols = math.ceil(math.sqrt(num_images))
    rows = math.ceil(num_images / cols)

    # Create a figure with subplots
    fig, axes = plt.subplots(rows, cols, figsize=(cols * (max_width / 100), rows * (max_height / 100)))
    axes = axes.flatten()  # Flatten the axes array for easy iteration

    # Loop over the images and plot each one
    for i, img in enumerate(images):
        axes[i].imshow(img)
        axes[i].axis('off')  # Hide the axes

    # Hide any remaining empty subplots
    for j in range(i + 1, len(axes)):
        axes[j].axis('off')

    # Display the images
    plt.tight_layout()
    plt.show()
----------------------------------------------





import matplotlib.pyplot as plt
import math

def display_images(images, image_size=(5, 5)):
    """
    Displays a list of images in an optimized grid layout.

    Parameters:
    - images (list): A list of images to display.
    - image_size (tuple): The size of each image (width, height) in inches.

    Returns:
    - None
    """
    # Determine the number of images
    num_images = len(images)

    # Calculate the optimal number of rows and columns
    cols = math.ceil(math.sqrt(num_images))
    rows = math.ceil(num_images / cols)

    # Create a figure with subplots
    fig, axes = plt.subplots(rows, cols, figsize=(cols * image_size[0], rows * image_size[1]))
    axes = axes.flatten()  # Flatten the axes array for easy iteration

    # Loop over the images and plot each one
    for i, img in enumerate(images):
        axes[i].imshow(img)
        axes[i].axis('off')  # Hide the axes

    # Hide any remaining empty subplots
    for j in range(i + 1, len(axes)):
        axes[j].axis('off')

    # Display the images
    plt.tight_layout()
    plt.show()
from PIL import Image

# Example images list
images = [Image.open('image1.png'), Image.open('image2.png'), Image.open('image3.png')]  # Replace with your images

# Display the images
display_images(images)
















def chunk_list(lst, chunk_size):
    # Split the list into chunks of size chunk_size
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]

# Sample lists of objects
list1 = [obj1, obj2, obj3, obj4, obj5, obj6, obj7]  # Replace with your actual objects
list2 = [objA, objB, objC, objD, objE, objF, objG]  # Replace with your actual objects

# Desired chunk size
chunk_size = 5

# Chunk both lists
chunks1 = list(chunk_list(list1, chunk_size))
chunks2 = list(chunk_list(list2, chunk_size))

# Print or process the chunks as needed
for chunk1, chunk2 in zip(chunks1, chunks2):
    print("Chunk from list1:", chunk1)
    print("Chunk from list2:", chunk2)

# If the lists are not of equal length, handle remaining chunks
if len(chunks1) > len(chunks2):
    for chunk in chunks1[len(chunks2):]:
        print("Remaining chunk from list1:", chunk)
elif len(chunks2) > len(chunks1):
    for chunk in chunks2[len(chunks1):]:
        print("Remaining chunk from list2:", chunk)
